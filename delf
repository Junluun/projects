I I apologize for the confusion. The error message "Type of expression must be boolean" typically indicates that the condition in an if statement or while loop does not evaluate to a boolean value. 

Here's an example of how you can handle the OnExit event for a TMaskEdit component in Delphi to check if the entered value matches a specified mask and display an error message if it doesn't:

procedure TForm1.MaskEdit1Exit(Sender: TObject);
var
  maskEdit: TMaskEdit;
  mask: string;
begin
  maskEdit := Sender as TMaskEdit;
  mask := '99/99/9999'; // example mask, you can use a different mask

  // Check if the entered value matches the mask
  if not SameText(maskEdit.EditText, mask) then
  begin
    ShowMessage('The entered value does not match the mask!');
    maskEdit.Text := ''; // clear the field
    maskEdit.SetFocus; // set focus back to the maskedit field
  end;
end;


Make sure to replace MaskEdit1 with the name of your TMaskEdit component in the code.


have a code for tgrid, improve it for tdbgrideh 
T
procedure TForm4. Buttondrawcolumnce11 (Sender: TObject; Button: Tbutton; Btncaption: string; Datacol, YourCol: Integer; Column: TColumn; Grid: TDBGrid; const Rect: TRect; State: TGridDrawState);
var
R, DataRect: TRect;
style: DWORD;
FButtonCol :integer;
FCel1Down: TGridCoord;
begin
R := rect;
inflaterect (R, -1,-1);
if (not (gdFixed in State)) and (DataCol = YourCol) then
begin
if styleservices.Enabled then
TDBGrid(Sender). Canvas.Brush.Color := styleservices.GetStyleColor (scButtonDisabled)
else
TDBGrid (Sender). Canvas.Brush.Color := clbtnface;
style := DECS_INACTIVE or DFCS_ADJUSTRECT;
DrawFrameContro1 ( grid.Canvas.Handle,r.DFC_BUTTON,style);
TDBGrid(Sender). DefaultDrawColumnCe11 (R, DataCo1, Colunn, State);
TDBGrid (Sender). Canvas. Brush.Style:= bsclear;
if styleservices.enabled then
TDBGrid(Sender).Canvas.Font.Color
else
: = Styleservices. GetStyleFontColor(sfButtonTextdisabled)
TDBGrid(Sender). Canvas.Font.Color
= ciblack;
DravText (Grid. Canvas.Handle, PChar (BtnCaption), -1, F. PT CENTER );
TDBGrid (Sender) .DefaultDrawColumnCel1 (R, DataCol, Column, State);
end;
if grid.DataSource.DataSet. RecNo <- grid.DataSource.DataSet.recordcount then
begin
if (not (gdFixed in State)) and (DataCol
= YourCol) then
begin
DataRect : = TModDbGrid(grid).CellRect((YourCol+1), TModDbGrid(grid).row);
Inflaterect(datarect, -1,-1);
button.Width: = Datarect.Width;
button.left:= (DataRect.right - button.width);
button.top := DataRect. top ;
button. height:- (DataRect.bottom-DataRect. top);
button.visible:= true;
end;
end;
end;To place a button in each cell of a specific row in TDBGridEh component in Delphi, you can use the OnDrawColumnCell event to customize the appearance of the cells. Here's an example of how you can achieve this:

In the OnDrawColumnCell event handler of your TDBGridEh component, add the following code:
delphi
Copy
procedure TForm1.DBGridEh1DrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
var
  ButtonRect: TRect;
  ButtonText: string;
begin
  if Column.Field.FieldName = 'ID' then // Replace 'ID' with the actual field name
  begin
    // Draw a button in the cell
    ButtonRect := Rect;
    InflateRect(ButtonRect, -2, -2); // Adjust the button size as needed
    ButtonText := 'View'; // Button text

    // Draw the button
    DBGridEh1.Canvas.FillRect(ButtonRect);
    DBGridEh1.Canvas.TextRect(ButtonRect, ButtonRect.Left, ButtonRect.Top, ButtonText);

    // Optionally, you can add additional customization
    // For example, you can change the font, colors, or borders of the button
    // DBGridEh1.Canvas.Font := ...
    // DBGridEh1.Canvas.Brush.Color := ...
    // DBGridEh1.Canvas.Pen.Color := ...
    // DBGridEh1.Canvas.FrameRect(ButtonRect);
  end;
end;
In the above code, replace 'ID' with the actual field name that contains the ID value.

Customize the appearance of the button by modifying the ButtonRect and ButtonText variables as needed. You can adjust the size and position of the button by changing the values in ButtonRect. You can also change the text displayed on the button by modifying the ButtonText variable.

Optionally, you can add additional customization to the button's appearance by modifying the canvas properties (Font, Brush, Pen, etc.) before drawing the button.

By implementing the OnDrawColumnCell event handler as shown above, you will be able to display a button in each cell of the specified row based on the ID value. You can handle the button clicks separately by adding a click event to the DBGridEh component and checking the coordinates of the clicked cell to determine the action to perform based on the associated ID.

Note: Make sure to assign the OnDrawColumnCell event handler to the TDBGridEh component's OnDrawColumnCell event in the Object Inspector or in code.

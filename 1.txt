UPDATE stages
SET date_begin = current_date
WHERE st_id IN (
  SELECT st_id
  FROM stages
  WHERE stgr_priority = (
    SELECT MIN(stgr_priority)
    FROM stages
  )
  AND st_priority = (
    SELECT MIN(st_priority)
    FROM stages
    WHERE stgr_priority = (
      SELECT MIN(stgr_priority)
      FROM stages
    )
  )
);

-- Получение параметров rut_id и rrcc_id от пользователя
DECLARE
  v_rut_id INT;
  v_rrcc_id INT;
BEGIN
  -- Указываете значения переменных v_rut_id и v_rrcc_id в соответствии с вашими требованиями
  v_rut_id := 1;
  v_rrcc_id := 1;
  
  -- Вставка записей в relation_stage_history
  INSERT INTO relation_stage_history (rrcc_id, st_id, rsh_date_begin, rsh_date_end)
  SELECT v_rrcc_id, rs.st_id, NULL, NULL
  FROM ref_route_structure ruts
  INNER JOIN ref_stage_group rsg ON ruts.stgr_id = rsg.stgr_id
  INNER JOIN ref_stage rs ON rsg.stgr_id = rs.stgr_id
  WHERE ruts.rut_id = v_rut_id
  ORDER BY rsg.stgr_priority ASC, rs.st_priority ASC
  LIMIT 1;
  
  -- Вставка записей в stage_pass_history
  INSERT INTO stage_pass_history (cc_id, st_id, sph_date_begin, sph_date_end)
  SELECT cc_id, rs.st_id, NULL, NULL
  FROM candidate_card cc
  INNER JOIN relation_request rr ON cc.cc_id = rr.cc_id
  INNER JOIN relation_stage_history rsh ON rr.rrcc_id = rsh.rrcc_id
  INNER JOIN ref_stage rs ON rsh.st_id = rs.st_id
  WHERE rr.rrcc_id = v_rrcc_id
    AND rs.st_id IN (SELECT st_id FROM relation_stage_history WHERE rrcc_id = v_rrcc_id)
    AND rs.st_id NOT IN (SELECT st_id FROM stage_pass_history WHERE cc_id = cc.cc_id)
    AND rsh.rsh_date_begin IS NOT NULL
    AND rsh.rsh_date_end IS NULL;
END;


Для заполнения таблиц relation_stage_history и stage_pass_history в зависимости от выбранного ref_route, вам потребуется сочетание SQL-запросов и операторов цикла для обработки каждого этапа st_id в заданном маршруте rut_id. Вот примерный алгоритм, который вы можете использовать для этой задачи:

DECLARE
  curr_st_id INT;
  curr_st_priority INT;
  curr_stgr_id INT;
  curr_stgr_priority INT;
  is_for_request BOOLEAN;
  rsh_id INT;
  sph_id INT;
  curr_date DATE;
BEGIN
  -- Получить текущую дату
  curr_date := current_date;

  -- Получить этапы для выбранного маршрута
  FOR curr_st_id, curr_st_priority, curr_stgr_id, curr_stgr_priority, is_for_request IN (
    SELECT rs.st_id, rs.st_priority, rs.stgr_id, rsg.stgr_priority, rsg.is_for_request
    FROM ref_route_structure rrs
    JOIN ref_route rr ON rrs.rut_id = rr.rut_id
    JOIN ref_stage rs ON rrs.st_id = rs.st_id
    JOIN ref_stage_group rsg ON rs.stgr_id = rsg.stgr_id
    WHERE rr.rut_id = <выбранный rut_id>
    ORDER BY rsg.stgr_priority ASC, rs.st_priority ASC
  ) LOOP
    IF is_for_request THEN
      -- Вставить запись в таблицу relation_stage_history
      INSERT INTO relation_stage_history (rrcc_id, st_id, rsh_date_begin)
      VALUES (<значение rrcc_id>, curr_st_id, curr_date)
      RETURNING rsh_id INTO rsh_id;
    ELSE
      -- Вставить запись в таблицу stage_pass_history
      INSERT INTO stage_pass_history (cc_id, st_id, sph_date_begin)
      VALUES (<значение cc_id>, curr_st_id, curr_date)
      RETURNING sph_id INTO sph_id;
    END IF;

    -- Обновить дату окончания предыдущего этапа (если есть)
    IF rsh_id IS NOT NULL THEN
      UPDATE relation_stage_history
      SET rsh_date_end = curr_date
      WHERE rsh_id = rsh_id;
    ELSIF sph_id IS NOT NULL THEN
      UPDATE stage_pass_history
      SET sph_date_end = curr_date
      WHERE sph_id = sph_id;
    END IF;

    -- Установить текущую дату в новую дату начала для следующего этапа
    curr_date := curr_date + INTERVAL '1 day';
  END LOOP;
END;


Прежде чем использовать этот алгоритм, вам необходимо заменить <выбранный rut_id>, <значение rrcc_id> и <значение cc_id> на соответствующие значения вашего контекста.

Этот алгоритм:
- Использует цикл FOR для обработки каждого этапа st_id в выбранном маршруте rut_id.
- В зависимости от значения is_for_request (True или False), выполняет вставку записи в таблицу relation_stage_history или stage_pass_history.
- Обновляет дату окончания предыдущего этапа (если есть) соответствующим образом.
- Устанавливает новую дату начала curr_date для следующего этапа.

Обратите внимание, что вам также необходимо проверить и внести необходимые изменения в запросы для получения значений <значение rrcc_id> и <значение cc_id> в соответствии с вашей базой данных и бизнес-логикой.

Пожалуйста, убедитесь, что вы указали таблицы, столбцы и ограничения правильно в соответствии с вашей базой данных. Если у вас возникнут дополнительные вопросы, пожалуйста, дайте мне знать!


Извините за недопонимание в предыдущем запросе. При попытке выбрать минимальный приоритет этапа, я извлек минимальный приоритет этапа из всех доступных, а не из тех, у которых значение date_end равно NULL.

Давайте скорректируем наш запрос следующим образом:

WITH filtered_history AS (
  SELECT * FROM stage_pass_history
  WHERE sph_date_begin IS NULL AND sph_date_end IS NULL
),

minimal_group AS (
  SELECT MIN(stgr_priority) AS min_stgr_priority 
  FROM ref_stage_group
  JOIN ref_stage ON ref_stage.stgr_id = ref_stage_group.stgr_id
  JOIN filtered_history ON filtered_history.st_id = ref_stage.st_id
),

minimal_stage_in_min_group AS (
  SELECT MIN(st_priority) AS min_st_priority 
  FROM ref_stage
  JOIN minimal_group ON ref_stage.stgr_id = minimal_group.min_stgr_priority
  JOIN filtered_history ON filtered_history.st_id = ref_stage.st_id
)

SELECT filtered_history.sph_id, filtered_history.sph_date_begin, filtered_history.sph_date_end, 
  filtered_history.st_id, ref_stage.name AS stage_name
FROM filtered_history
JOIN minimal_stage_in_min_group ON filtered_history.st_id = minimal_stage_in_min_group.min_st_priority
JOIN ref_stage ON filtered_history.st_id = ref_stage.st_id;


Логика здесь в следующем:

- Мы сначала создаем CTE (Common Table Expression), который называется "filteredhistory", в котором сохраняем все записи из stagepasshistory, где `datebegin и dateend` равны NULL. 

- Затем мы создаем CTE "minimalgroup", который получит минимальную группу из filtered_history.

- Затем мы создаем CTE "minimalstageinmingroup", который из групп с минимальным приоритетом получит этапы с минимальным приоритетом.

- Наконец, мы используем эти CTE в нашем основном SQL-запросе для выбора необходимых записей, соответствующих вашему исходному условию.

Приношу извинения за путаницу ранее. В таком случае, вам потребуется добавить ещё один уровень подзапроса, чтобы сначала найти минимальную группу, а затем минимальный этап внутри этой группы. Попробуйте следующий SQL-запрос:

```sql
SELECT sph.sph_id, sph.sph_date_begin, sph.sph_date_end, sph.st_id, rs.name 
FROM stage_pass_history sph
JOIN ref_stage rs ON sph.st_id = rs.st_id
JOIN ref_stage_group rsg ON rs.stgr_id = rsg.stgr_id
WHERE sph.sph_date_begin IS NULL
  AND sph.sph_date_end IS NULL
  AND rs.stgr_id =
    (SELECT rs_inner.stgr_id
    FROM ref_stage rs_inner
    JOIN ref_stage_group rsg_inner ON rs_inner.stgr_id = rsg_inner.stgr_id
    WHERE rsg_inner.stgr_priority = 
      (SELECT MIN(stgr_priority) FROM ref_stage_group)
    LIMIT 1)
  AND rs.st_priority =
    (SELECT MIN(rs_inner.st_priority)
    FROM ref_stage rs_inner
    WHERE rs_inner.stgr_id = rs.stgr_id
    LIMIT 1);
```

В этом запросе первым шагом было добавление нового подзапроса на выбор минимального stgr_priority из таблицы ref_stage_group, которое используется для определения stgr_id минимальной группы. 

Затем, это значение stgr_id используется в основной выборке для фильтрации записей только из этой группы и во внутреннем подзапросе для выбора этапа с минимальным приоритетом. 

В итоге, основной запрос выберет те записи, где начало и конец этапа (sph_date_begin и sph_date_end) равны NULL, и этап является этапом с наименьшим приоритетом в группе с наименьшим приоритетом.


Приношу извинения за предыдущую ошибку. Чтобы найти записи с самым низким приоритетом этапа среди записей с NULL значениями для date_begin и date_end, вы можете использовать следующий запрос:

SELECT stage_pass_history.sph_id, stage_pass_history.sph_date_begin, stage_pass_history.sph_date_end,
    stage_pass_history.st_id, stage.name AS stage_name
FROM stage_pass_history
JOIN ref_stage stage ON stage_pass_history.st_id = stage.st_id
WHERE stage_pass_history.sph_date_begin IS NULL
    AND stage_pass_history.sph_date_end IS NULL
    AND stage.st_id = (
        SELECT st.st_id
        FROM stage_pass_history sph
        JOIN ref_stage st ON sph.st_id = st.st_id
        WHERE sph.sph_date_begin IS NULL
            AND sph.sph_date_end IS NULL
        ORDER BY st.st_priority, sph.sph_id
        LIMIT 1
    )


В этом запросе мы сначала выбираем записи из stage_pass_history с NULL значениями для sph_date_begin и sph_date_end. Затем мы фильтруем записи, чтобы выбрать только те, у которых st_id равно минимальному st_id с наименьшим приоритетом этапа.

Для нахождения записи с минимальным приоритетом этапа и минимальным st_id среди записей с NULL значениями, мы используем вложенный подзапрос. В этом подзапросе мы также выбираем записи с NULL значениями для sph_date_begin и sph_date_end, затем сортируем их по st_priority, а затем по sph_id в порядке возрастания, чтобы найти минимальный приоритет среди них. Затем мы ограничиваем результаты только одной записью с помощью LIMIT 1.

Таким образом, запрос вернет записи только с минимальным приоритетом этапа среди записей с NULL значениями для date_begin и date_end.


Понял, ваше условие отбора записей из таблицы stage_pass_history должно быть проведено в начале. 

Давайте попробуем изменить запрос следующим образом:

```sql
WITH filtered_history AS (
  SELECT * FROM stage_pass_history
  WHERE sph_date_begin IS NULL AND sph_date_end IS NULL
)

SELECT filtered_history.sph_id, filtered_history.sph_date_begin, filtered_history.sph_date_end, 
  filtered_history.st_id, ref_stage.name AS stage_name

FROM ref_stage_group
  
INNER JOIN ref_stage ON ref_stage_group.stgr_id = ref_stage.stgr_id

INNER JOIN filtered_history ON filtered_history.st_id = ref_stage.st_id

WHERE ref_stage_group.stgr_priority = 
  (SELECT MIN(stgr_priority) FROM ref_stage_group)
  
AND ref_stage.st_priority = 
  (SELECT MIN(st_priority) FROM ref_stage WHERE stgr_id = ref_stage_group.stgr_id);

```

Сначала мы делаем подзапрос (называемый здесь filtered_history), где выбираем все записи из stage_pass_history, в которых date_begin и date_end равны NULL. Затем мы присоединяем этот подзапрос к таблицам ref_stage и ref_stage_group.

В конечной выборке, мы фильтруем записи таким образом, чтобы эта запись принадлежала к группе с наименьшим приоритетом (MIN(stgr_priority) из таблицы ref_stage_group), а внутри этой группы обладала наименьшим приоритетом этапа (MIN(st_priority) из ref_stage).

Таким образом, мы получим записи, у которых date_begin и date_end NULL, которые принадлежат то группе с минимальным приоритетом, и из этой группы обладают минимальным приоритетом этапа.



Для того чтобы найти этап (stage) с наименьшим приоритетом, у которого не указана дата окончания (date_end), можно использовать SQL запрос с сочетанием объединения таблиц и оператора IS NULL (проверка что поле пустое, т.е. не заполнено). По Вашему запросу, можно составить такой SQL код: 

SELECT 
    sph.sph_id,
    sph.st_id,
    sph.date_begin,
    sph.date_end,
    rs.stgr_id,
    rs.st_priority,
    rsg.stgr_priority
FROM 
    stage_pass_history sph
INNER JOIN 
    ref_stage rs ON sph.st_id = rs.st_id
INNER JOIN 
    ref_stage_group rsg ON rs.stgr_id = rsg.stgr_id
WHERE 
    rs.st_priority = 
    (
        SELECT 
            MIN(rs.st_priority)
        FROM 
            ref_stage rs 
        INNER JOIN 
            stage_pass_history sph ON rs.st_id = sph.st_id
        WHERE 
            sph.date_end IS NULL
    )
    AND 
    rsg.stgr_priority = 
    (
        SELECT 
            MIN(rsg.stgr_priority)
        FROM  
            ref_stage_group rsg
        INNER JOIN 
            ref_stage rs ON rsg.stgr_id = rs.stgr_id
        WHERE 
            rs.st_id IN 
            (
                SELECT
                    st_id
                FROM 
                    stage_pass_history
                WHERE 
                    date_end IS NULL
            )
    )
    AND 
    sph.date_end IS NULL
ORDER BY 
    rs.st_priority,
    rsg.stgr_priority;


Цель этого запроса -- выбрать те строки, где стадия (stage) имеет наименьший приоритет (st_priority), где имеется минимальный приоритет групп (stgr_priority) и дата окончания (date_end) в таблице stage_pass_history не заполнена. Если есть несколько строк, которые удовлетворяют этим условиям, то они все будут выбраны. Можно добавить LIMIT 1 в конце, если вам нужна только одна строка. 

Обратите внимание, что запрос предполагает, что отсутствующие значения date_end представлены в виде NULL в таблице stage_pass_history. Если отсутствующие значения представлены по-другому, запрос может понадобится откорректировать.


Далее предоставлен уточненный алгоритм, который учитывает присвоение значения date_begin только этапам с минимальным приоритетом и минимальным приоритетом группы.

1. Выберите маршрут из таблицы "ref_route".

2. Получите список групп маршрутов, связанных с этим маршрутом, из таблицы "ref_route_structure".

3. Отсортируйте группы по их приоритету ("stgr_priority").

4. Определите минимальный приоритет группы ("min_group_priority") и минимальный приоритет этапа в минимальной группе ("min_stage_priority").

5. Найдите группы, соответствующие "min_group_priority", и в каждой из этих групп идентифицируйте этапы, соответствующие "min_stage_priority". 

6. Для каждого этапа полученного на шаге 5:
   - Если "is_for_request" = True для группы этапа, вставьте запись со значением date_begin в таблицу "relation_stage_history".
   - Если "is_for_request" = False для группы этапа, вставьте запись со значением date_begin в таблицу "relation_pass_history".

7. Когда этап успешно завершается (исходя из ваших бизнес-правил):
   - Установите date_end для этого этапа.
   - Проверьте, есть ли другие незавершенные этапы в этой группе или в других группах с тем же приоритетом.
        - Если в этой группе есть незавершенные этапы, установите date_begin для этапа с следующим минимальным приоритетом в этой группе.
        - Если все этапы в этой группе завершены, но есть другие группы с тем же приоритетом, установите date_begin для этапа с минимальным приоритетом в следующей группе.
        - Если в других группах с таким же приоритетом нет незавершенных этапов, установите date_begin для этапа с минимальным приоритетом в следующей группе с минимальным приоритетом.

8. Повторяйте шаги 7 и 8, пока все этапы всех групп не будут завершены.
